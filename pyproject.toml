[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[tool.hatch.version]
path = 'arq/version.py'

[project]
name = 'arq'
description = 'Job queues in python with asyncio and redis'
authors = [{name = 'Samuel Colvin', email = 's@muelcolvin.com'}]
license = {file = 'LICENSE'}
readme = 'README.md'
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    'Framework :: AsyncIO',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'License :: OSI Approved :: MIT License',
    'Operating System :: Unix',
    'Operating System :: POSIX :: Linux',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Topic :: Internet',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: System :: Clustering',
    'Topic :: System :: Distributed Computing',
    'Topic :: System :: Monitoring',
    'Topic :: System :: Systems Administration',
]
requires-python = '>=3.7'
dependencies = [
    'redis[hiredis]>=4.2.0',
    'click>=8.0',
    'typing-extensions>=4.1.0',
]
optional-dependencies = {watch = ['watchfiles>=0.16'] }
dynamic = ['version']

[project.scripts]
arq = 'arq.cli:cli'

[project.urls]
Homepage = 'https://github.com/samuelcolvin/arq'
Documentation = 'https://arq-docs.helpmanual.io'
Funding = 'https://github.com/sponsors/samuelcolvin'
Source = 'https://github.com/samuelcolvin/arq'
Changelog = 'https://github.com/samuelcolvin/arq/releases'

[tool.pytest.ini_options]
testpaths = 'tests'
filterwarnings = ['error']
asyncio_mode = 'auto'
timeout = 10

[tool.coverage.run]
source = ['arq']
branch = true
omit = ['arq/__main__.py']

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'raise NotImplemented',
    'if TYPE_CHECKING:',
    '@overload',
]

[tool.black]
color = true
line-length = 120
target-version = ['py39']
skip-string-normalization = true

[tool.isort]
line_length = 120
known_third_party = 'foxglove'
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
color_output = true

[tool.mypy]
show_error_codes = true
follow_imports = 'silent'
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

# remaining arguments from `mypy --strict` which cause errors
#no_implicit_optional = true
#warn_return_any = true
